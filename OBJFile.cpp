#include "OBJFile.h"


//Marco Antonio QuiÃ±a Mamani


OBJFile::OBJFile()
{

}
void OBJFile::readFileOBJ(const std::string& filename) {
    std::ifstream fileStream{ filename, std::ios_base::in };
    if (fileStream.is_open())
    {
        while (!fileStream.eof())
        {
            std::string line;
            getline(fileStream, line);
            std::stringstream lineStream{ line };

            std::string firstSymbol;
            lineStream >> firstSymbol;
            if (firstSymbol == "v")
            {
                float vertexPosition{};
                float x,y,z;
                lineStream >> x >> y >> z;
                glm::vec3 vertice(x, y, z);
                m_VertexPositions.emplace_back(vertice);
            }
            else if (firstSymbol == "vt")
            {
                float textureCoordinate{};
                for (unsigned int i = 0; i < 2; ++i)
                {
                    lineStream >> textureCoordinate;
                    m_TextureCoordinates.emplace_back(textureCoordinate);
                }
            }
            else if (firstSymbol == "vn")
            {
                float normal{};
                for (unsigned int i = 0; i < 3; ++i)
                {
                    lineStream >> normal;
                    m_Normals.emplace_back(normal);
                }
            }
            else if (firstSymbol == "f")
            {
                unsigned short a;
                for (unsigned int i = 0; i < 3; ++i)
                {
                    lineStream >> a ;
                    m_Indices.emplace_back(a);
                }
            }
        }
    }
}
void OBJFile::writeFrames(const std::string& directory, unsigned index)
{
    std::string fileName  = directory+"/frame_"+std::to_string(index)+".obj";

    std::ofstream frame(fileName);
    if (!frame.is_open())
    {
        std::cerr<<"Error opening "<<fileName <<std::endl;
        return;
    }
    frame <<"# Generated by Visualization Toolkit"<<std::endl;
    for(auto it = m_VertexPositions.begin(); it != m_VertexPositions.end(); ++it)
    {
        frame <<"v "<<std::setprecision(20)<<it->x<<" "<<it->y<<" "<<it->z<<std::endl;
    }

    for(unsigned i = 0; i < m_Indices.size(); i+=3) {

        frame<<"f "<<m_Indices[i]<<" "<<m_Indices[i+1]<<" "<<m_Indices[i+2]<<std::endl;

    }
}

void OBJFile::writeFramesInVTK(const std::string& directory, unsigned index)
{
    std::string fileName  = directory+"/frame_"+std::to_string(index)+".vtk";

    std::ofstream frame (fileName);

    if (!frame.is_open())
    {
        std::cerr<<"Error opening "<<fileName <<std::endl;
        return;
    }

    //headers
    frame <<"# vtk DataFile Version 2.0"<<std::endl;
    frame<<"Particle system"<<std::endl;
    frame<<"ASCII"<<std::endl;
    frame<<"DATASET UNSTRUCTURED_GRID"<<std::endl;
    frame<<"POINTS "<< m_VertexPositions.size()<< " float"<< std::endl;

    for(auto it = m_VertexPositions.begin(); it != m_VertexPositions.end(); ++it)
    {

        frame <<it->x<<" "<<it->y<<" "<<it->z<<std::endl;
    }

    frame<<"CELLS "<< m_VertexPositions.size()<< " "<< m_VertexPositions.size()*2<< std::endl;

    for(unsigned i=0;i<m_VertexPositions.size();++i)
    {
        frame<<1<<" "<<i<<std::endl;

    }

    frame<<"CELL_TYPES "<< m_VertexPositions.size()<< std::endl;
    for(unsigned i=0;i<m_VertexPositions.size();++i)
    {
        frame<<1<<std::endl;
    }

    frame<<"CELL_DATA "<< m_VertexPositions.size()<< std::endl;
    frame<<"SCALARS cell_scalars float 1"<< std::endl;
    frame<<"LOOKUP_TABLE ParticleColors "<< std::endl;
    for(unsigned i=0;i<m_VertexPositions.size();++i)
    {
        frame<< "0.0" <<std::endl;
    }

    //Green color
    frame<<"LOOKUP_TABLE ParticleColors "<< m_VertexPositions.size()<< std::endl;
    for(unsigned i=0;i<m_VertexPositions.size();++i)
    {
        frame<< "0.0 1.0 0.0 1.0" <<std::endl;
    }
}

OBJFile::Vertices& OBJFile::GetVertices() {
    return m_VertexPositions;
}

OBJFile::TextureCoordinates& OBJFile::GetTextureCoordinates() {
    return m_TextureCoordinates;
}

OBJFile::Normals& OBJFile::GetNormals() {
    return m_Normals;
}

OBJFile::Indices& OBJFile::GetIndices() {
    return m_Indices;
}
